// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: galatea/v1/auth.proto

package galateav1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	v1 "shared/go/pb/galatea/v1"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion1_7_0

const (
	// AuthServiceName is the fully-qualified name of the AuthService service.
	AuthServiceName = "galatea.v1.AuthService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthServiceSignInProcedure is the fully-qualified name of the AuthService's SignIn RPC.
	AuthServiceSignInProcedure = "/galatea.v1.AuthService/SignIn"
	// AuthServiceSignUpProcedure is the fully-qualified name of the AuthService's SignUp RPC.
	AuthServiceSignUpProcedure = "/galatea.v1.AuthService/SignUp"
	// AuthServiceVerifyProcedure is the fully-qualified name of the AuthService's Verify RPC.
	AuthServiceVerifyProcedure = "/galatea.v1.AuthService/Verify"
	// AuthServiceCheckProcedure is the fully-qualified name of the AuthService's Check RPC.
	AuthServiceCheckProcedure = "/galatea.v1.AuthService/Check"
)

// AuthServiceClient is a client for the galatea.v1.AuthService service.
type AuthServiceClient interface {
	SignIn(context.Context, *connect_go.Request[v1.SignInRequest]) (*connect_go.Response[v1.SignInResponse], error)
	SignUp(context.Context, *connect_go.Request[v1.SignUpRequest]) (*connect_go.Response[v1.SignUpResponse], error)
	Verify(context.Context, *connect_go.Request[v1.VerifyRequest]) (*connect_go.Response[v1.VerifyResponse], error)
	Check(context.Context, *connect_go.Request[v1.CheckRequest]) (*connect_go.Response[v1.CheckResponse], error)
}

// NewAuthServiceClient constructs a client for the galatea.v1.AuthService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AuthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &authServiceClient{
		signIn: connect_go.NewClient[v1.SignInRequest, v1.SignInResponse](
			httpClient,
			baseURL+AuthServiceSignInProcedure,
			opts...,
		),
		signUp: connect_go.NewClient[v1.SignUpRequest, v1.SignUpResponse](
			httpClient,
			baseURL+AuthServiceSignUpProcedure,
			opts...,
		),
		verify: connect_go.NewClient[v1.VerifyRequest, v1.VerifyResponse](
			httpClient,
			baseURL+AuthServiceVerifyProcedure,
			opts...,
		),
		check: connect_go.NewClient[v1.CheckRequest, v1.CheckResponse](
			httpClient,
			baseURL+AuthServiceCheckProcedure,
			connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
			connect_go.WithClientOptions(opts...),
		),
	}
}

// authServiceClient implements AuthServiceClient.
type authServiceClient struct {
	signIn *connect_go.Client[v1.SignInRequest, v1.SignInResponse]
	signUp *connect_go.Client[v1.SignUpRequest, v1.SignUpResponse]
	verify *connect_go.Client[v1.VerifyRequest, v1.VerifyResponse]
	check  *connect_go.Client[v1.CheckRequest, v1.CheckResponse]
}

// SignIn calls galatea.v1.AuthService.SignIn.
func (c *authServiceClient) SignIn(ctx context.Context, req *connect_go.Request[v1.SignInRequest]) (*connect_go.Response[v1.SignInResponse], error) {
	return c.signIn.CallUnary(ctx, req)
}

// SignUp calls galatea.v1.AuthService.SignUp.
func (c *authServiceClient) SignUp(ctx context.Context, req *connect_go.Request[v1.SignUpRequest]) (*connect_go.Response[v1.SignUpResponse], error) {
	return c.signUp.CallUnary(ctx, req)
}

// Verify calls galatea.v1.AuthService.Verify.
func (c *authServiceClient) Verify(ctx context.Context, req *connect_go.Request[v1.VerifyRequest]) (*connect_go.Response[v1.VerifyResponse], error) {
	return c.verify.CallUnary(ctx, req)
}

// Check calls galatea.v1.AuthService.Check.
func (c *authServiceClient) Check(ctx context.Context, req *connect_go.Request[v1.CheckRequest]) (*connect_go.Response[v1.CheckResponse], error) {
	return c.check.CallUnary(ctx, req)
}

// AuthServiceHandler is an implementation of the galatea.v1.AuthService service.
type AuthServiceHandler interface {
	SignIn(context.Context, *connect_go.Request[v1.SignInRequest]) (*connect_go.Response[v1.SignInResponse], error)
	SignUp(context.Context, *connect_go.Request[v1.SignUpRequest]) (*connect_go.Response[v1.SignUpResponse], error)
	Verify(context.Context, *connect_go.Request[v1.VerifyRequest]) (*connect_go.Response[v1.VerifyResponse], error)
	Check(context.Context, *connect_go.Request[v1.CheckRequest]) (*connect_go.Response[v1.CheckResponse], error)
}

// NewAuthServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthServiceHandler(svc AuthServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(AuthServiceSignInProcedure, connect_go.NewUnaryHandler(
		AuthServiceSignInProcedure,
		svc.SignIn,
		opts...,
	))
	mux.Handle(AuthServiceSignUpProcedure, connect_go.NewUnaryHandler(
		AuthServiceSignUpProcedure,
		svc.SignUp,
		opts...,
	))
	mux.Handle(AuthServiceVerifyProcedure, connect_go.NewUnaryHandler(
		AuthServiceVerifyProcedure,
		svc.Verify,
		opts...,
	))
	mux.Handle(AuthServiceCheckProcedure, connect_go.NewUnaryHandler(
		AuthServiceCheckProcedure,
		svc.Check,
		connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
		connect_go.WithHandlerOptions(opts...),
	))
	return "/galatea.v1.AuthService/", mux
}

// UnimplementedAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthServiceHandler struct{}

func (UnimplementedAuthServiceHandler) SignIn(context.Context, *connect_go.Request[v1.SignInRequest]) (*connect_go.Response[v1.SignInResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("galatea.v1.AuthService.SignIn is not implemented"))
}

func (UnimplementedAuthServiceHandler) SignUp(context.Context, *connect_go.Request[v1.SignUpRequest]) (*connect_go.Response[v1.SignUpResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("galatea.v1.AuthService.SignUp is not implemented"))
}

func (UnimplementedAuthServiceHandler) Verify(context.Context, *connect_go.Request[v1.VerifyRequest]) (*connect_go.Response[v1.VerifyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("galatea.v1.AuthService.Verify is not implemented"))
}

func (UnimplementedAuthServiceHandler) Check(context.Context, *connect_go.Request[v1.CheckRequest]) (*connect_go.Response[v1.CheckResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("galatea.v1.AuthService.Check is not implemented"))
}
