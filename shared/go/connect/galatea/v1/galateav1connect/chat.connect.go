// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: galatea/v1/chat.proto

package galateav1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	v1 "shared/go/pb/galatea/v1"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ChatServiceName is the fully-qualified name of the ChatService service.
	ChatServiceName = "galatea.v1.ChatService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ChatServiceChatAllProcedure is the fully-qualified name of the ChatService's ChatAll RPC.
	ChatServiceChatAllProcedure = "/galatea.v1.ChatService/ChatAll"
	// ChatServiceChatGetProcedure is the fully-qualified name of the ChatService's ChatGet RPC.
	ChatServiceChatGetProcedure = "/galatea.v1.ChatService/ChatGet"
	// ChatServiceChatCreateProcedure is the fully-qualified name of the ChatService's ChatCreate RPC.
	ChatServiceChatCreateProcedure = "/galatea.v1.ChatService/ChatCreate"
	// ChatServiceChatDeleteProcedure is the fully-qualified name of the ChatService's ChatDelete RPC.
	ChatServiceChatDeleteProcedure = "/galatea.v1.ChatService/ChatDelete"
	// ChatServiceChatSendMessageProcedure is the fully-qualified name of the ChatService's
	// ChatSendMessage RPC.
	ChatServiceChatSendMessageProcedure = "/galatea.v1.ChatService/ChatSendMessage"
	// ChatServiceChatSubscribeProcedure is the fully-qualified name of the ChatService's ChatSubscribe
	// RPC.
	ChatServiceChatSubscribeProcedure = "/galatea.v1.ChatService/ChatSubscribe"
)

// ChatServiceClient is a client for the galatea.v1.ChatService service.
type ChatServiceClient interface {
	ChatAll(context.Context, *connect_go.Request[v1.ChatAllRequest]) (*connect_go.Response[v1.ChatAllResponse], error)
	ChatGet(context.Context, *connect_go.Request[v1.ChatGetRequest]) (*connect_go.Response[v1.ChatGetResponse], error)
	ChatCreate(context.Context, *connect_go.Request[v1.ChatCreateRequest]) (*connect_go.Response[v1.ChatCreateResponse], error)
	ChatDelete(context.Context, *connect_go.Request[v1.ChatDeleteRequest]) (*connect_go.Response[v1.ChatDeleteResponse], error)
	ChatSendMessage(context.Context, *connect_go.Request[v1.ChatSendMessageRequest]) (*connect_go.Response[v1.ChatSendMessageResponse], error)
	ChatSubscribe(context.Context, *connect_go.Request[v1.ChatSubscribeRequest]) (*connect_go.ServerStreamForClient[v1.ChatSubscribeResponse], error)
}

// NewChatServiceClient constructs a client for the galatea.v1.ChatService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewChatServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ChatServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &chatServiceClient{
		chatAll: connect_go.NewClient[v1.ChatAllRequest, v1.ChatAllResponse](
			httpClient,
			baseURL+ChatServiceChatAllProcedure,
			opts...,
		),
		chatGet: connect_go.NewClient[v1.ChatGetRequest, v1.ChatGetResponse](
			httpClient,
			baseURL+ChatServiceChatGetProcedure,
			opts...,
		),
		chatCreate: connect_go.NewClient[v1.ChatCreateRequest, v1.ChatCreateResponse](
			httpClient,
			baseURL+ChatServiceChatCreateProcedure,
			opts...,
		),
		chatDelete: connect_go.NewClient[v1.ChatDeleteRequest, v1.ChatDeleteResponse](
			httpClient,
			baseURL+ChatServiceChatDeleteProcedure,
			opts...,
		),
		chatSendMessage: connect_go.NewClient[v1.ChatSendMessageRequest, v1.ChatSendMessageResponse](
			httpClient,
			baseURL+ChatServiceChatSendMessageProcedure,
			opts...,
		),
		chatSubscribe: connect_go.NewClient[v1.ChatSubscribeRequest, v1.ChatSubscribeResponse](
			httpClient,
			baseURL+ChatServiceChatSubscribeProcedure,
			opts...,
		),
	}
}

// chatServiceClient implements ChatServiceClient.
type chatServiceClient struct {
	chatAll         *connect_go.Client[v1.ChatAllRequest, v1.ChatAllResponse]
	chatGet         *connect_go.Client[v1.ChatGetRequest, v1.ChatGetResponse]
	chatCreate      *connect_go.Client[v1.ChatCreateRequest, v1.ChatCreateResponse]
	chatDelete      *connect_go.Client[v1.ChatDeleteRequest, v1.ChatDeleteResponse]
	chatSendMessage *connect_go.Client[v1.ChatSendMessageRequest, v1.ChatSendMessageResponse]
	chatSubscribe   *connect_go.Client[v1.ChatSubscribeRequest, v1.ChatSubscribeResponse]
}

// ChatAll calls galatea.v1.ChatService.ChatAll.
func (c *chatServiceClient) ChatAll(ctx context.Context, req *connect_go.Request[v1.ChatAllRequest]) (*connect_go.Response[v1.ChatAllResponse], error) {
	return c.chatAll.CallUnary(ctx, req)
}

// ChatGet calls galatea.v1.ChatService.ChatGet.
func (c *chatServiceClient) ChatGet(ctx context.Context, req *connect_go.Request[v1.ChatGetRequest]) (*connect_go.Response[v1.ChatGetResponse], error) {
	return c.chatGet.CallUnary(ctx, req)
}

// ChatCreate calls galatea.v1.ChatService.ChatCreate.
func (c *chatServiceClient) ChatCreate(ctx context.Context, req *connect_go.Request[v1.ChatCreateRequest]) (*connect_go.Response[v1.ChatCreateResponse], error) {
	return c.chatCreate.CallUnary(ctx, req)
}

// ChatDelete calls galatea.v1.ChatService.ChatDelete.
func (c *chatServiceClient) ChatDelete(ctx context.Context, req *connect_go.Request[v1.ChatDeleteRequest]) (*connect_go.Response[v1.ChatDeleteResponse], error) {
	return c.chatDelete.CallUnary(ctx, req)
}

// ChatSendMessage calls galatea.v1.ChatService.ChatSendMessage.
func (c *chatServiceClient) ChatSendMessage(ctx context.Context, req *connect_go.Request[v1.ChatSendMessageRequest]) (*connect_go.Response[v1.ChatSendMessageResponse], error) {
	return c.chatSendMessage.CallUnary(ctx, req)
}

// ChatSubscribe calls galatea.v1.ChatService.ChatSubscribe.
func (c *chatServiceClient) ChatSubscribe(ctx context.Context, req *connect_go.Request[v1.ChatSubscribeRequest]) (*connect_go.ServerStreamForClient[v1.ChatSubscribeResponse], error) {
	return c.chatSubscribe.CallServerStream(ctx, req)
}

// ChatServiceHandler is an implementation of the galatea.v1.ChatService service.
type ChatServiceHandler interface {
	ChatAll(context.Context, *connect_go.Request[v1.ChatAllRequest]) (*connect_go.Response[v1.ChatAllResponse], error)
	ChatGet(context.Context, *connect_go.Request[v1.ChatGetRequest]) (*connect_go.Response[v1.ChatGetResponse], error)
	ChatCreate(context.Context, *connect_go.Request[v1.ChatCreateRequest]) (*connect_go.Response[v1.ChatCreateResponse], error)
	ChatDelete(context.Context, *connect_go.Request[v1.ChatDeleteRequest]) (*connect_go.Response[v1.ChatDeleteResponse], error)
	ChatSendMessage(context.Context, *connect_go.Request[v1.ChatSendMessageRequest]) (*connect_go.Response[v1.ChatSendMessageResponse], error)
	ChatSubscribe(context.Context, *connect_go.Request[v1.ChatSubscribeRequest], *connect_go.ServerStream[v1.ChatSubscribeResponse]) error
}

// NewChatServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewChatServiceHandler(svc ChatServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(ChatServiceChatAllProcedure, connect_go.NewUnaryHandler(
		ChatServiceChatAllProcedure,
		svc.ChatAll,
		opts...,
	))
	mux.Handle(ChatServiceChatGetProcedure, connect_go.NewUnaryHandler(
		ChatServiceChatGetProcedure,
		svc.ChatGet,
		opts...,
	))
	mux.Handle(ChatServiceChatCreateProcedure, connect_go.NewUnaryHandler(
		ChatServiceChatCreateProcedure,
		svc.ChatCreate,
		opts...,
	))
	mux.Handle(ChatServiceChatDeleteProcedure, connect_go.NewUnaryHandler(
		ChatServiceChatDeleteProcedure,
		svc.ChatDelete,
		opts...,
	))
	mux.Handle(ChatServiceChatSendMessageProcedure, connect_go.NewUnaryHandler(
		ChatServiceChatSendMessageProcedure,
		svc.ChatSendMessage,
		opts...,
	))
	mux.Handle(ChatServiceChatSubscribeProcedure, connect_go.NewServerStreamHandler(
		ChatServiceChatSubscribeProcedure,
		svc.ChatSubscribe,
		opts...,
	))
	return "/galatea.v1.ChatService/", mux
}

// UnimplementedChatServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedChatServiceHandler struct{}

func (UnimplementedChatServiceHandler) ChatAll(context.Context, *connect_go.Request[v1.ChatAllRequest]) (*connect_go.Response[v1.ChatAllResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("galatea.v1.ChatService.ChatAll is not implemented"))
}

func (UnimplementedChatServiceHandler) ChatGet(context.Context, *connect_go.Request[v1.ChatGetRequest]) (*connect_go.Response[v1.ChatGetResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("galatea.v1.ChatService.ChatGet is not implemented"))
}

func (UnimplementedChatServiceHandler) ChatCreate(context.Context, *connect_go.Request[v1.ChatCreateRequest]) (*connect_go.Response[v1.ChatCreateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("galatea.v1.ChatService.ChatCreate is not implemented"))
}

func (UnimplementedChatServiceHandler) ChatDelete(context.Context, *connect_go.Request[v1.ChatDeleteRequest]) (*connect_go.Response[v1.ChatDeleteResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("galatea.v1.ChatService.ChatDelete is not implemented"))
}

func (UnimplementedChatServiceHandler) ChatSendMessage(context.Context, *connect_go.Request[v1.ChatSendMessageRequest]) (*connect_go.Response[v1.ChatSendMessageResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("galatea.v1.ChatService.ChatSendMessage is not implemented"))
}

func (UnimplementedChatServiceHandler) ChatSubscribe(context.Context, *connect_go.Request[v1.ChatSubscribeRequest], *connect_go.ServerStream[v1.ChatSubscribeResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("galatea.v1.ChatService.ChatSubscribe is not implemented"))
}
