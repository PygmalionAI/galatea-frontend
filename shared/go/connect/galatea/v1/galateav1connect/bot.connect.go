// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: galatea/v1/bot.proto

package galateav1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	v1 "shared/go/pb/galatea/v1"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// BotServiceName is the fully-qualified name of the BotService service.
	BotServiceName = "galatea.v1.BotService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BotServiceBotAllProcedure is the fully-qualified name of the BotService's BotAll RPC.
	BotServiceBotAllProcedure = "/galatea.v1.BotService/BotAll"
	// BotServiceBotCreateProcedure is the fully-qualified name of the BotService's BotCreate RPC.
	BotServiceBotCreateProcedure = "/galatea.v1.BotService/BotCreate"
	// BotServiceBotUpdateProcedure is the fully-qualified name of the BotService's BotUpdate RPC.
	BotServiceBotUpdateProcedure = "/galatea.v1.BotService/BotUpdate"
	// BotServiceBotDeleteProcedure is the fully-qualified name of the BotService's BotDelete RPC.
	BotServiceBotDeleteProcedure = "/galatea.v1.BotService/BotDelete"
)

// BotServiceClient is a client for the galatea.v1.BotService service.
type BotServiceClient interface {
	BotAll(context.Context, *connect_go.Request[v1.BotAllRequest]) (*connect_go.Response[v1.BotAllResponse], error)
	BotCreate(context.Context, *connect_go.Request[v1.BotCreateRequest]) (*connect_go.Response[v1.BotCreateResponse], error)
	BotUpdate(context.Context, *connect_go.Request[v1.BotUpdateRequest]) (*connect_go.Response[v1.BotUpdateResponse], error)
	BotDelete(context.Context, *connect_go.Request[v1.BotDeleteRequest]) (*connect_go.Response[v1.BotDeleteResponse], error)
}

// NewBotServiceClient constructs a client for the galatea.v1.BotService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBotServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) BotServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &botServiceClient{
		botAll: connect_go.NewClient[v1.BotAllRequest, v1.BotAllResponse](
			httpClient,
			baseURL+BotServiceBotAllProcedure,
			opts...,
		),
		botCreate: connect_go.NewClient[v1.BotCreateRequest, v1.BotCreateResponse](
			httpClient,
			baseURL+BotServiceBotCreateProcedure,
			opts...,
		),
		botUpdate: connect_go.NewClient[v1.BotUpdateRequest, v1.BotUpdateResponse](
			httpClient,
			baseURL+BotServiceBotUpdateProcedure,
			opts...,
		),
		botDelete: connect_go.NewClient[v1.BotDeleteRequest, v1.BotDeleteResponse](
			httpClient,
			baseURL+BotServiceBotDeleteProcedure,
			opts...,
		),
	}
}

// botServiceClient implements BotServiceClient.
type botServiceClient struct {
	botAll    *connect_go.Client[v1.BotAllRequest, v1.BotAllResponse]
	botCreate *connect_go.Client[v1.BotCreateRequest, v1.BotCreateResponse]
	botUpdate *connect_go.Client[v1.BotUpdateRequest, v1.BotUpdateResponse]
	botDelete *connect_go.Client[v1.BotDeleteRequest, v1.BotDeleteResponse]
}

// BotAll calls galatea.v1.BotService.BotAll.
func (c *botServiceClient) BotAll(ctx context.Context, req *connect_go.Request[v1.BotAllRequest]) (*connect_go.Response[v1.BotAllResponse], error) {
	return c.botAll.CallUnary(ctx, req)
}

// BotCreate calls galatea.v1.BotService.BotCreate.
func (c *botServiceClient) BotCreate(ctx context.Context, req *connect_go.Request[v1.BotCreateRequest]) (*connect_go.Response[v1.BotCreateResponse], error) {
	return c.botCreate.CallUnary(ctx, req)
}

// BotUpdate calls galatea.v1.BotService.BotUpdate.
func (c *botServiceClient) BotUpdate(ctx context.Context, req *connect_go.Request[v1.BotUpdateRequest]) (*connect_go.Response[v1.BotUpdateResponse], error) {
	return c.botUpdate.CallUnary(ctx, req)
}

// BotDelete calls galatea.v1.BotService.BotDelete.
func (c *botServiceClient) BotDelete(ctx context.Context, req *connect_go.Request[v1.BotDeleteRequest]) (*connect_go.Response[v1.BotDeleteResponse], error) {
	return c.botDelete.CallUnary(ctx, req)
}

// BotServiceHandler is an implementation of the galatea.v1.BotService service.
type BotServiceHandler interface {
	BotAll(context.Context, *connect_go.Request[v1.BotAllRequest]) (*connect_go.Response[v1.BotAllResponse], error)
	BotCreate(context.Context, *connect_go.Request[v1.BotCreateRequest]) (*connect_go.Response[v1.BotCreateResponse], error)
	BotUpdate(context.Context, *connect_go.Request[v1.BotUpdateRequest]) (*connect_go.Response[v1.BotUpdateResponse], error)
	BotDelete(context.Context, *connect_go.Request[v1.BotDeleteRequest]) (*connect_go.Response[v1.BotDeleteResponse], error)
}

// NewBotServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBotServiceHandler(svc BotServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(BotServiceBotAllProcedure, connect_go.NewUnaryHandler(
		BotServiceBotAllProcedure,
		svc.BotAll,
		opts...,
	))
	mux.Handle(BotServiceBotCreateProcedure, connect_go.NewUnaryHandler(
		BotServiceBotCreateProcedure,
		svc.BotCreate,
		opts...,
	))
	mux.Handle(BotServiceBotUpdateProcedure, connect_go.NewUnaryHandler(
		BotServiceBotUpdateProcedure,
		svc.BotUpdate,
		opts...,
	))
	mux.Handle(BotServiceBotDeleteProcedure, connect_go.NewUnaryHandler(
		BotServiceBotDeleteProcedure,
		svc.BotDelete,
		opts...,
	))
	return "/galatea.v1.BotService/", mux
}

// UnimplementedBotServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBotServiceHandler struct{}

func (UnimplementedBotServiceHandler) BotAll(context.Context, *connect_go.Request[v1.BotAllRequest]) (*connect_go.Response[v1.BotAllResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("galatea.v1.BotService.BotAll is not implemented"))
}

func (UnimplementedBotServiceHandler) BotCreate(context.Context, *connect_go.Request[v1.BotCreateRequest]) (*connect_go.Response[v1.BotCreateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("galatea.v1.BotService.BotCreate is not implemented"))
}

func (UnimplementedBotServiceHandler) BotUpdate(context.Context, *connect_go.Request[v1.BotUpdateRequest]) (*connect_go.Response[v1.BotUpdateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("galatea.v1.BotService.BotUpdate is not implemented"))
}

func (UnimplementedBotServiceHandler) BotDelete(context.Context, *connect_go.Request[v1.BotDeleteRequest]) (*connect_go.Response[v1.BotDeleteResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("galatea.v1.BotService.BotDelete is not implemented"))
}
