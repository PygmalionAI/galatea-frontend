// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: galatea/v1/blob.proto

package galateav1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	v1 "shared/go/pb/galatea/v1"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ImageUploadServiceName is the fully-qualified name of the ImageUploadService service.
	ImageUploadServiceName = "galatea.v1.ImageUploadService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ImageUploadServiceImageUploadProcedure is the fully-qualified name of the ImageUploadService's
	// ImageUpload RPC.
	ImageUploadServiceImageUploadProcedure = "/galatea.v1.ImageUploadService/ImageUpload"
)

// ImageUploadServiceClient is a client for the galatea.v1.ImageUploadService service.
type ImageUploadServiceClient interface {
	ImageUpload(context.Context, *connect_go.Request[v1.ImageUploadRequest]) (*connect_go.Response[v1.ImageUploadResponse], error)
}

// NewImageUploadServiceClient constructs a client for the galatea.v1.ImageUploadService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewImageUploadServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ImageUploadServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &imageUploadServiceClient{
		imageUpload: connect_go.NewClient[v1.ImageUploadRequest, v1.ImageUploadResponse](
			httpClient,
			baseURL+ImageUploadServiceImageUploadProcedure,
			opts...,
		),
	}
}

// imageUploadServiceClient implements ImageUploadServiceClient.
type imageUploadServiceClient struct {
	imageUpload *connect_go.Client[v1.ImageUploadRequest, v1.ImageUploadResponse]
}

// ImageUpload calls galatea.v1.ImageUploadService.ImageUpload.
func (c *imageUploadServiceClient) ImageUpload(ctx context.Context, req *connect_go.Request[v1.ImageUploadRequest]) (*connect_go.Response[v1.ImageUploadResponse], error) {
	return c.imageUpload.CallUnary(ctx, req)
}

// ImageUploadServiceHandler is an implementation of the galatea.v1.ImageUploadService service.
type ImageUploadServiceHandler interface {
	ImageUpload(context.Context, *connect_go.Request[v1.ImageUploadRequest]) (*connect_go.Response[v1.ImageUploadResponse], error)
}

// NewImageUploadServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewImageUploadServiceHandler(svc ImageUploadServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(ImageUploadServiceImageUploadProcedure, connect_go.NewUnaryHandler(
		ImageUploadServiceImageUploadProcedure,
		svc.ImageUpload,
		opts...,
	))
	return "/galatea.v1.ImageUploadService/", mux
}

// UnimplementedImageUploadServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedImageUploadServiceHandler struct{}

func (UnimplementedImageUploadServiceHandler) ImageUpload(context.Context, *connect_go.Request[v1.ImageUploadRequest]) (*connect_go.Response[v1.ImageUploadResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("galatea.v1.ImageUploadService.ImageUpload is not implemented"))
}
